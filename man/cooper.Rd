% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fwelnet_mt.R
\name{cooper}
\alias{cooper}
\alias{fwelnet_mt_cox}
\title{Fit Cox-fwelnet for Multi-Task Learning}
\usage{
cooper(
  data,
  causes = 1:2,
  strata = NULL,
  mt_max_iter = 5,
  z_method = "original",
  stratify_by_status = FALSE,
  alpha = 1,
  standardize = TRUE,
  verbose = FALSE,
  t = 1,
  a = 0.5,
  thresh = 0.001,
  nfolds = 10,
  include_mt_beta_history = FALSE,
  epsilon1 = sqrt(.Machine$double.eps),
  epsilon2 = epsilon1,
  ...
)

fwelnet_mt_cox(
  data,
  causes = 1:2,
  strata = NULL,
  mt_max_iter = 5,
  z_method = "original",
  stratify_by_status = FALSE,
  alpha = 1,
  standardize = TRUE,
  verbose = FALSE,
  t = 1,
  a = 0.5,
  thresh = 0.001,
  nfolds = 10,
  include_mt_beta_history = FALSE,
  epsilon1 = sqrt(.Machine$double.eps),
  epsilon2 = epsilon1,
  ...
)
}
\arguments{
\item{data}{A data.frame or matrix holding predictors and outcome,
with outcome variables assumed to be named \code{"time"} and \code{"status"}.}

\item{causes}{(Unused for now) Integer vector indicating causes, e.g. \code{1:2} for two causes.}

\item{strata}{\verb{[NULL]} Quoted name of a stratification variable.
Passed to \link[glmnet:stratifySurv]{glmnet::stratifySurv} as \code{strata = data[[strata]]}.}

\item{mt_max_iter}{\verb{[5]} number of mt-iterations to perform. Will break early
if no change in per-cause beta vector between iterations is detected.
If set to \code{0}, no \code{fwelnet} iteration will be performed and the returned
coefficients will be the result of fitting a cause-specific \code{glmnet}.}

\item{z_method}{\code{("original")} Either assign \code{z1} to be informed by \code{beta2}
of the current iteration (default behavior, as described in Algorithm 2
in Tay et. al. 2020), or \code{"aligned"} to have both \code{z1} and \code{z2} be informed
by \code{beta2} and \code{beta1} from the previous iteration step respectively.}

\item{stratify_by_status}{(\code{FALSE}) If \code{TRUE}, the internal cross-validation folds are sampled by the \code{status}
variable, leading to folds with roughly equal proportions of events as in \code{data}.
This is helpful in cases where many censored observations in folds lead to errors during model fits.}

\item{alpha}{\code{(1)} Passed to \code{\link[=glmnet]{glmnet()}} and \code{\link[=fwelnet]{fwelnet()}}.}

\item{standardize}{Passed to \code{\link{cv.fwelnet}} and \code{\link{cv.glmnet}} respectively.}

\item{verbose}{Display informative message on the state of the mt fit.}

\item{t}{The initial step size for \code{theta} backtracking line search
(default value is 1).}

\item{a}{The factor by which step size is decreased in \code{theta}
backtracking line search (default value is 0.5).}

\item{thresh}{If the mean/median objective function does not decrease by at
least this factor, we terminate the optimization early. Default is 1e-4.}

\item{nfolds}{(\code{10}) Used for \code{stratify_by_status} and only has effect if that is \code{TRUE}.}

\item{include_mt_beta_history}{\verb{[FALSE]} If \code{TRUE}, output \code{list} includes
components \code{beta1} and \code{beta2}, matrices of dimensions \code{p} x \code{mt_iter_max + 1}
containing coefficient vectors for causes 1 and 2 for each multi-task iteration,
with the first column corresponding to the original \code{cv.glmnet} solution.}

\item{epsilon1, epsilon2}{RMSE between beta1 and beta2 values of consecutive iterations to consider equal to stop the algorithm.
Defaults to \code{sqrt(.Machine$double.eps)}, roughly 1.5e-08 on conventional machines.}

\item{...}{Passed to \code{\link[=fwelnet]{fwelnet()}}}
}
\value{
An object of class \code{cooper} with \code{cv.fwelnet} objects of the final iteration.
If \code{include_mt_beta_history = TRUE}, contains per-cause beta matrices for each iteration step.
}
\description{
Survival-focused implementation of the fwelnet-multitask algorithm described
in Algorithm 2 on page 13 (Tay et. al. 2020)
}
\examples{
data(pbc, package = "survival")
pbc <- na.omit(pbc)
xtrain <- pbc[1:270, -1]

set.seed(12)
cooperfit <- cooper(
  xtrain, mt_max_iter = 3,
  stratify_by_status = TRUE
)

}
